#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>

// Process class to represent each CPU process
class Process {
public:
    int pid;           // Process ID
    int arrivalTime;   // Time when process arrives
    int burstTime;     // Total CPU time needed
    int waitingTime;   // Time spent waiting in the queue
    int turnaroundTime;// Total time from arrival to completion

    // Constructor
    Process(int id, int arrival, int burst) 
        : pid(id), arrivalTime(arrival), burstTime(burst), 
          waitingTime(0), turnaroundTime(0) {}
};

// Function to perform FCFS scheduling
void fcfsScheduling(std::vector<Process>& processes) {
    // Sort processes by arrival time
    std::sort(processes.begin(), processes.end(), 
        [](const Process& a, const Process& b) {
            return a.arrivalTime < b.arrivalTime;
        });

    int currentTime = 0;
    double totalWaitingTime = 0;
    double totalTurnaroundTime = 0;

    // Process each job in order of arrival
    for (auto& process : processes) {
        // If current time is less than arrival time, move time forward
        if (currentTime < process.arrivalTime) {
            currentTime = process.arrivalTime;
        }

        // Calculate waiting time
        process.waitingTime = std::max(0, currentTime - process.arrivalTime);

        // Update current time after processing
        currentTime += process.burstTime;

        // Calculate turnaround time
        process.turnaroundTime = process.waitingTime + process.burstTime;

        // Add to total times for average calculation
        totalWaitingTime += process.waitingTime;
        totalTurnaroundTime += process.turnaroundTime;
    }

    // Print results
    std::cout << "FCFS Scheduling Results:" << std::endl;
    std::cout << std::left << std::setw(10) << "Process" 
              << std::setw(15) << "Arrival Time" 
              << std::setw(15) << "Burst Time" 
              << std::setw(15) << "Waiting Time" 
              << "Turnaround Time" << std::endl;

    for (const auto& p : processes) {
        std::cout << std::left << std::setw(10) << p.pid 
                  << std::setw(15) << p.arrivalTime 
                  << std::setw(15) << p.burstTime 
                  << std::setw(15) << p.waitingTime 
                  << p.turnaroundTime << std::endl;
    }

    // Calculate and print averages
    double avgWaitingTime = totalWaitingTime / processes.size();
    double avgTurnaroundTime = totalTurnaroundTime / processes.size();

    std::cout << "\nAverage Waiting Time: " 
              << std::fixed << std::setprecision(2) << avgWaitingTime << std::endl;
    std::cout << "Average Turnaround Time: " 
              << std::fixed << std::setprecision(2) << avgTurnaroundTime << std::endl;
}

int main() {
    // Create a vector of processes
    std::vector<Process> processes = {
        Process(1, 0, 10),    // Process 1: Arrives at time 0, needs 10 time units
        Process(2, 1, 5),     // Process 2: Arrives at time 1, needs 5 time units
        Process(3, 3, 8)      // Process 3: Arrives at time 3, needs 8 time units
    };

    // Perform FCFS scheduling
    fcfsScheduling(processes);

    return 0;
}
